version: '3.3'

services:

  data_api:
    container_name: data_api
    restart: always
    hostname: data_api
    build: ./dataAPI/
    networks:
      AWS_net:
        ipv4_address: 172.28.1.1
    expose:
      - 8801
    ports:
    - "8809:8809"
    env_file:
      - models.env

  command_api:
    container_name: command_api
    restart: always
    hostname: command_api
    build: ./commandAPI/
    networks:
      AWS_net:
        ipv4_address: 172.28.1.2
    expose:
      - 8802
    env_file:
      - models.env

  creation_api:
    container_name: creation_api
    restart: always
    hostname: creation_api
    build: ./creationAPI/
    networks:
      AWS_net:
        ipv4_address: 172.28.1.3
    expose:
      - 8803
    env_file:
      - models.env

  managment_api:
    container_name: managment_api
    restart: always
    hostname: managment_api
    build: managementAPI/
    networks:
      AWS_net:
        ipv4_address: 172.28.1.4
    expose:
      - 8804
    env_file:
      - models.env

  key_api:
    container_name: key_api
    restart: always
    hostname: key_api
    build: keyAPI/
    networks:
      AWS_net:
        ipv4_address: 172.28.1.5
    expose:
      - 8805
    env_file:
      - models.env

  nginx:
    build: ./nginx
    restart: always
    hostname: nginx
    container_name: nginxIoT
    networks:
      AWS_net:
        ipv4_address: 172.28.1.6
    ports:
      - "80:80"

  db:
    container_name: db
    build: ./DataBase/
    restart: always
    hostname: db
    networks:
      AWS_net:
        ipv4_address: 172.28.1.7
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_USER: root
      MYSQL_HOST: localhost
      MYSQL_DATABASE: IoT
    expose:
      - 3306

networks:
    AWS_net:
        ipam:
            driver: default
            config:
                - subnet: 172.28.0.0/16